
/*

Time: O(n)
Space : O(3n)
*/
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int len = nums.size();
        vector<int> left(len,0);
        vector<int> right(len,0);
        left[0] = 1;
        for(int i=1;i<len;i++){
            left[i] = left[i-1] *  nums[i-1];
        }
        right[len-1] = 1;
        for(int i=len-2;i>=0;i--){
            right[i] = right[i+1] *  nums[i+1];
        }

        for(int i=0;i<len;i++){
            left[i] = left[i] * right[i];
        }
        return left;    
    }
};


/*

Time: O(n)
Space : O(n)
*/

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int len = nums.size();
        vector<int> ans(len,0);
        ans[0] = 1;
        for(int i=1;i<len;i++){
            ans[i] = ans[i-1] * nums[i-1];
        }

        int p = 1;
        
       for(int i=len-1; i>=0;i--){
		ans[i] = p * ans[i];
		p = p * nums[i];
       }
       return ans;
    }
};

