class Solution {
    public:
      vector<int> topKFrequent(vector<int>& nums, int k) {
      unordered\_map\<int,int> freq;
      for(int num : nums)freq\[num]++;
      priority\_queue\<pair\<int,int>> pq;
      for(auto \[k,v] : freq)pq.push({v,k});
      vector<int> ans;
      while(k--){
        auto top = pq.top();
        pq.pop();
        ans.push\_back(top.second);
      }
      return ans;
   }
};


/*

TC : n log n

*/

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> freq;
        for(int num : nums)freq[num]++;
        priority_queue<pair<int,int>,vector<pair<int,int>>, greater<>> pq;
        for(auto [key,val] : freq){
            pq.push({val,key});
            if(pq.size()>k)pq.pop();
        };
        vector<int> ans;
        while(!pq.empty()){
            auto top = pq.top();
            pq.pop();
            ans.push_back(top.second);
        }
        return ans;
    }
};

/*

TC : n log k

*/
