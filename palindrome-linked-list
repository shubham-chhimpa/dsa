/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* tmp){
        ListNode* head = tmp;
        ListNode *prev =NULL;
        while(head){
            ListNode* next=head->next;
            head->next=prev;
            prev=head;
            head = next;
        }

        return prev;
    }
    bool isPalindrome(ListNode* head) {
        ListNode* slow=head;
        ListNode* fast=head;

        while(fast and fast->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode *revHead = reverseList(slow);
        while(revHead){
            if(revHead->val != head->val) return false;
            revHead=revHead->next;
            head=head->next;
        }
        return true;
    }
};
