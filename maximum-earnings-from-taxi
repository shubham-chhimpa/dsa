
// binary search + recursive dp
class Solution {
public:
    int getPrev(vector<vector<int>> &rides,int m){
        int low =0;
        int high = m-1;
        int current_start = rides[m][0];
        int prev_end = -1;
        while(low<=high){
           int mid = low + (high -low)/2;
           if(rides[mid][1]<=current_start){
            prev_end=mid;
            low=mid+1;
           }else{
            high = mid-1;
           } 
        }
        return prev_end;
    }
    long long solve(vector<vector<int>>& rides,int m,vector<long long> &memo){
        if(m<0) return 0;
        if(memo[m] != -1) return memo[m];
        long long skip = solve(rides,m-1,memo);
        long long earn = rides[m][2] + (long long)(rides[m][1]-rides[m][0]);
        int prev = getPrev(rides,m);
        long long notskip = earn+ (prev>=0 ? solve(rides,prev,memo):0);
        return memo[m]=max(skip,notskip);
    }
    long long maxTaxiEarnings(int n, vector<vector<int>>& rides) {
        sort(rides.begin(),rides.end(),[](auto &a,auto &b){ return a[1]<b[1];});
        vector<long long> memo(rides.size(),-1);
        return solve(rides,rides.size()-1,memo);
    }
};



// binary search + iterative dp
class Solution {
public:
    int getPrev(vector<vector<int>> &rides,int m){
        int low =0;
        int high = m-1;
        int current_start = rides[m][0];
        int prev_end = -1;
        while(low<=high){
           int mid = low + (high -low)/2;
           if(rides[mid][1]<=current_start){
            prev_end=mid;
            low=mid+1;
           }else{
            high = mid-1;
           } 
        }
        return prev_end;
    }
    long long maxTaxiEarnings(int n, vector<vector<int>>& rides) {
        sort(rides.begin(),rides.end(),[](auto &a,auto &b){ return a[1]<b[1];});
        vector<long long> dp(rides.size(),0);
        int m = rides.size();
        for(int i=0;i<m;i++){
            long long earn = rides[i][2] + rides[i][1]-rides[i][0];
            long long prev = getPrev(rides,i); 
            if(prev!=-1){
                earn+= dp[prev];
            }
            dp[i] = max((i>0?dp[i-1]:0),earn);
        }

        return dp[m-1];
    }
};
