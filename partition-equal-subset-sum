class Solution {
public:
    bool solve(vector<int> &nums,int n,int target,vector<vector<int>> &memo)  {
        if(target == 0) return true;
        if(n < 0) return false;
        if(memo[n][target] != -1) return memo[n][target];
        if(nums[n] <= target){
            memo[n][target] = solve(nums,n-1,target-nums[n],memo) || solve(nums,n-1,target,memo);
        }else{
            memo[n][target] = solve(nums,n-1,target,memo);
        }
        return memo[n][target];
    }
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        for(int num : nums) sum +=num;
        if(sum % 2 !=0) return false;
        sum = sum/2;
        vector<vector<int>> memo(n,vector<int>(sum+1,-1));
        return solve(nums,n-1,sum,memo);
    }
};
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        for(int num : nums) sum +=num;
        if(sum % 2 !=0) return false;
        sum = sum/2;
        vector<vector<bool>> dp(n+1,vector<bool>(sum+1,false));
        
        for(int i=0;i<=n;i++){
            dp[i][0]=true;
        }

        for(int i=1;i<=n;i++){
            for(int j=1;j<=sum;j++){
                if(nums[i-1]<=j){
                    dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i-1]];
                }else{
                    dp[i][j] = dp[i-1][j] ;
                }
            }
        }

        return dp[n][sum];

    }
};
