class Solution {
public:
    void dfs(vector<vector<int>> &adj,int source,unordered_set<int> &vis){
        vis.insert(source);
        for(int n : adj[source]){
            if(vis.find(n) == vis.end()) dfs(adj,n,vis);
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        int edges = connections.size();
        if(edges<n-1) return -1;
        vector<vector<int>> adj(n,vector<int>());
        unordered_set<int> vis;
        int cnt =0;
        for(auto edge :connections){
            int u = edge[0];
            int v = edge[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        for(int i=0;i<n;i++){
            if(vis.find(i) == vis.end()){
                cnt++;
                dfs(adj,i,vis);
            }
        }

        return cnt-1;
    }
};
