class Solution {
  public:
    bool dfs(int source,int parent,vector<vector<int>>& adj, vector<bool> &visited){
        visited[source] = true;
        for(int n : adj[source]){
            if(!visited[n]){
                if(dfs(n,source,adj,visited)) return true;
            }else if(n != parent){
                return true;
            }
        }
        
        return false;
    }
    bool isCycle(int V, vector<vector<int>>& edges) {
        vector<bool> visited(V,false);
        vector<vector<int>> adj(V,vector<int>());
        for(auto edge :edges){
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        for(int i=0;i<V;i++){
            if(!visited[i] and dfs(i,-1,adj,visited)) return true;
        }
        return false;
    }
};
