class Solution {
public:
    void solve(int row,int n,vector<vector<string>> &ans,vector<string> &board,unordered_set<int> &posDia,unordered_set<int> &negDia,unordered_set<int> &cols){
        if(row==n){
            ans.push_back(board);
            return;
        }

        for(int col=0;col<n;col++){
            if(cols.find(col) != cols.end() ||
                posDia.find(row-col) != posDia.end() ||
                negDia.find(row+col) != negDia.end()
            ) continue;
            cols.insert(col);
            posDia.insert(row-col);
            negDia.insert(row+col);
            board[row][col] = 'Q';
            solve(row+1,n,ans,board,posDia,negDia,cols);
            cols.erase(col);
            posDia.erase(row-col);
            negDia.erase(row+col);
            board[row][col] = '.';
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        unordered_set<int> cols;
        unordered_set<int> posDia; // postive diagonal (r-c)
        unordered_set<int> negDia; // negative diagoral (r+c)
        vector<vector<string>> ans;
        vector<string> board(n,string(n,'.'));
        solve(0,n,ans,board,posDia,negDia,cols);
        return ans;
    }
};
