class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int,int>>> adj(n+1,vector<pair<int,int>>());

        for(auto time : times){
            int from = time[0];
            int to = time[1];
            int w = time[2];
            adj[from].push_back({w,to});
        }

        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<>> q;
        q.push({0,k});
        vector<int> min_time(n+1,INT_MAX);
        min_time[k] = 0;
        while(!q.empty()){
            auto curr = q.top();
            q.pop();
            int weight = curr.first;
            int node = curr.second;
            if (weight > min_time[node]) continue;
            for(auto neigh : adj[node]){
                int neigh_node = neigh.second;
                int neigh_weight = neigh.first;
                if(weight+neigh_weight < min_time[neigh_node]){
                    min_time[neigh_node] = weight+neigh_weight;
                    q.push({weight+neigh_weight,neigh_node});
                }
            }
        }

        int mx = 0;
        for(int i=1;i<=n;i++){
            mx = max(mx,min_time[i]);
        } 
        return mx==INT_MAX ? -1 : mx;
    }
};
