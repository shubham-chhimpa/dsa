class Solution {
public:
    int solve(vector<int> &nums,int n, int nextIndex,vector<vector<int>> &memo){
        if(n<0) return 0;
        if(memo[n][nextIndex] != -1) return memo[n][nextIndex];
        if(nextIndex == nums.size() || nums[n]<nums[nextIndex]){
            return memo[n][nextIndex]=max(1+solve(nums,n-1,n,memo),solve(nums,n-1,nextIndex,memo));
        }else{
            return memo[n][nextIndex]= solve(nums,n-1,nextIndex,memo);
        }
    }
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> memo(n+1,vector<int>(n+1,-1));
        solve(nums,n-1,n,memo);
        return memo[n-1][n];
        
    }
};

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<int> dp(n,1);
        int mx = 1;
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i]){
                    dp[i] = max(dp[i],dp[j]+1);
                    mx = max(mx,dp[i]);
                }
            }
        }

        return mx;
    }
};


class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        vector<int> lis;
        for(int num : nums){
            auto it = lower_bound(lis.begin(),lis.end(),num);
            if(it == lis.end()){
                lis.push_back(num);
            }else{
                *it = num;
            }
        }

        return lis.size();
    }
};
