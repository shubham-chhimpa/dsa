/**
 * Definition of Interval:
 * class Interval {
 * public:
 *     int start, end;
 *     Interval(int start, int end) {
 *         this->start = start;
 *         this->end = end;
 *     }
 * }
 */

class Solution {
public:
    int minMeetingRooms(vector<Interval>& intervals) {
        int n = intervals.size();
        if(n==0) return 0;
        sort(intervals.begin(),intervals.end(),[](const Interval &a,const Interval &b){
            return a.start < b.start;
        });

        priority_queue<int,vector<int>,greater<int>> q;
        q.push(intervals[0].end);
        for(int i=1;i<n;i++){
            if(!q.empty() and intervals[i].start >= q.top()){
                q.pop();
            }
            q.push(intervals[i].end);
        }

        return q.size();
    }
};
