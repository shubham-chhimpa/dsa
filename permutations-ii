class Solution {
public:
    void solve(vector<int> &nums,vector<int> &tmp,vector<bool> &vis,vector<vector<int>> &ans){
        if(tmp.size() == nums.size()){
            ans.push_back(tmp);
            return;
        }
        for(int i=0;i<nums.size();i++){
            if(!vis[i]){
                // Skip duplicates: only allow the first unused duplicate
                if (i > 0 && nums[i] == nums[i - 1] && !vis[i - 1]) continue;
                vis[i]=true;
                tmp.push_back(nums[i]);
                solve(nums,tmp,vis,ans);
                tmp.pop_back();
                vis[i]=false;
            }
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        vector<int> tmp;
        vector<bool> vis(nums.size(),false);
        solve(nums,tmp,vis,ans);
        return ans;
    }
};
