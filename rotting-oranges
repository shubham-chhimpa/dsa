class Solution {
public:

    int dx[4] = {1,0,-1,0};
    int dy[4] = {0,1,0,-1};
    bool isSafe(int x,int y,int rows,int cols){
        if(x>=0 and x<rows and y>=0 and y<cols) return true;
        return false;
    }
   
    int orangesRotting(vector<vector<int>>& grid) {
        
        int rows = grid.size();
        int cols = grid[0].size();
        int time = 0;
        int fresh = 0;
        queue<pair<pair<int,int>,int>> q;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j] == 2){
                    q.push({{i,j},0});
                }else if(grid[i][j] == 1){
                    fresh++;
                }
            }
        }
        while(!q.empty()){
            auto front = q.front();
            q.pop();
            int x = front.first.first;
            int y = front.first.second;
            int level = front.second;
            time = max(time,level);
            for(int i=0;i<4;i++){
                int xn = x+dx[i];
                int yn = y+dy[i];
                if(isSafe(xn,yn,rows,cols) and grid[xn][yn] ==1){
                    q.push({{xn,yn},level+1});
                    grid[xn][yn]= 2;
                    fresh--;
                }
            }
          
        }

        return fresh==0 ? time : -1;
    }
};
