class Solution {
public:
    const vector<pair<int, int>> directions = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};

    void dfs(vector<vector<char>>& grid, int x, int y, int rows, int cols) {
        grid[x][y] = '0';

        for (const auto& [dx, dy] : directions) {
            int xn = x + dx;
            int yn = y + dy;
            if (xn >= 0 && xn < rows && yn >= 0 && yn < cols && grid[xn][yn] == '1') {
                dfs(grid, xn, yn, rows, cols);
            }
        }
    }

    int numIslands(vector<vector<char>>& grid) {
        if (grid.empty()) return 0;

        int count = 0;
        const int rows = grid.size();
        const int cols = grid[0].size();

        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (grid[i][j] == '1') {
                    dfs(grid, i, j, rows, cols);
                    ++count;
                }
            }
        }
        return count;
    }
};
