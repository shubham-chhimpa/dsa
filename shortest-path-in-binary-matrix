class Solution {
public:
    int dx[8] = {0,1,-1,0,-1,1,-1,1};
    int dy[8] = {1,0,0,-1,-1,1,1,-1};
    bool isSafe(int x,int y,int rows,int cols){
        if(x<0 || x>=rows || y<0 || y>=cols) return false;
        return true;
    }
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int rows=grid.size();
        int cols =grid[0].size();
        if(grid[0][0] !=0 || grid[rows-1][cols-1] != 0) return -1;
        queue<pair<int,pair<int,int>>> q;
        q.push({1,{0,0}});
        grid[0][0]=1;
        while(!q.empty()){
            auto curr = q.front();
            q.pop();
            int x =curr.second.first;
            int y = curr.second.second;
            int step = curr.first;
            if(x==rows-1 and y==cols-1) return step;
            for(int i=0;i<8;i++){
                int xn = x+ dx[i];
                int yn = y+ dy[i];
                if(isSafe(xn,yn,rows,cols) and grid[xn][yn]==0){
                    grid[xn][yn]=1;
                    q.push({step+1,{xn,yn}});
                }
            }
        }
        return -1;
    }
};
