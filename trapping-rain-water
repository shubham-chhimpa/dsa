class Solution {
public:
    int trap(vector<int>& height) {
        int len = height.size();
        vector<int> left(len,0);
        vector<int> right(len,0);

        for(int i=1;i<len;i++){
            left[i]=max(left[i-1],height[i-1]);
        }

        for(int i=len-2;i>0;i--){
            right[i]=max(right[i+1],height[i+1]);
        }
        int maxWater = 0;
        for(int i=0;i<len;i++){
            int diff = min(left[i],right[i]) - height[i];
            if(diff>0) maxWater+=diff;
        }

        return maxWater;
    }
};
/*

Space : 2 * O(n)
Time : 3* O(n)
*/


class Solution {
public:
    int trap(vector<int>& height) {

        int left=0;
        int right = height.size()-1;
        int leftMax = height[left];
        int rightMax = height[right];
        int water=0;
        while(left<=right){
            if(height[left]<height[right]){
                leftMax = max(leftMax,height[left]);
                water+= leftMax-height[left];
                left++;
            }else{
                rightMax = max(rightMax,height[right]);
                water+= rightMax-height[right];
                right--;
            }
        }

        return water;
    }
};

/*

Space : O(1)
Time : O(n)
*/
