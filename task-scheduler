

class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        unordered_map<int,int> freq;
        for(char task : tasks){
            freq[task-'A']++;
        }
        priority_queue<int> pq; //max heap
        for(auto [k,v] : freq) pq.push(v);
        int time =0;
        while(!pq.empty()){
            vector<int> temp;
            int cycle = 0;
            for(int i=0;i<=n;i++){
                if(!pq.empty()){
                    int count = pq.top();
                    pq.pop();
                    count--;
                    if(count>0) temp.push_back(count);
                    cycle++;
                }
            }
            for(int count: temp)pq.push(count);
            time += pq.empty() ? cycle:n+1; 
        }

        return time;
    }
};



class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        unordered_map<int,int> freq;
        int size = tasks.size();
        int maxFreq=0;
        for(char task : tasks){
            freq[task-'A']++;
            maxFreq = max(maxFreq,freq[task-'A']);
        }
        int maxFreqCount = 0;
        for(auto [k,v] : freq){
            if(v==maxFreq) maxFreqCount++;
        }
        int maxInterval = (maxFreq-1) * (n+1)  + maxFreqCount;
        return max(maxInterval,size);
    }
};
