class Solution {
public:
    int dx[4] = {0,0,-1,1};
    int dy[4] = {1,-1,0,0};

    bool isSafe(int x,int y,int rows,int cols){
        if(x<0 || x>=rows || y<0 || y>=cols) return false;
        return true;
    }

    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<bool>> visited(n,vector<bool>(n,false));

        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<>> q;

        q.push({grid[0][0],{0,0}});

        while(!q.empty()){

            auto curr = q.top();
            q.pop();
            int time = curr.first;
            int x = curr.second.first;
            int y = curr.second.second;
            if(x==n-1 and y==n-1) return time;
            for(int i=0;i<4;i++){
                int xn = x+dx[i];
                int yn = y+dy[i];
                if(!isSafe(xn,yn,n,n)) continue;
                if(visited[xn][yn]) continue;
                visited[xn][yn] =true;
                q.push({max(time,grid[xn][yn]),{xn,yn}});
            }
        }

        return 0; 
    }
};
