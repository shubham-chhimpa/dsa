class Solution {
public:
    int solve(int n, vector<int> &coins, int amount, vector<vector<int>> &memo) {
        if (amount == 0) return 0;
        if (n < 0) return INT_MAX - 1;
        if (memo[n][amount] != -1) return memo[n][amount];

        int take = INT_MAX - 1;
        if (coins[n] <= amount) {
            take = 1 + solve(n, coins, amount - coins[n], memo); // use the coin
        }
        int notake = solve(n - 1, coins, amount, memo); // skip the coin

        return memo[n][amount] = min(take, notake);
    }

    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        vector<vector<int>> memo(n, vector<int>(amount + 1, -1));  // size [n][amount+1]
        int ans =  solve(n - 1, coins, amount, memo);
        return ans == INT_MAX - 1 ? -1 :ans;
    }
};
