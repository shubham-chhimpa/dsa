class Solution {
public:
    void dfs(int source,vector<vector<int>> &adj,unordered_set<int> &visited){
        visited.insert(source);
        for(auto neigh: adj[source]){
            if(visited.find(neigh) == visited.end()){
                dfs(neigh,adj,visited);
            }
        }
    }
    int countComponents(int n, vector<vector<int>>& edges) {
        unordered_set<int> visited;
        vector<vector<int>> adj(n,vector<int>());
        for(auto edge: edges){
            int u = edge[0];
            int v = edge[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        int cnt = 0;
        for(int i=0;i<n;i++){
            if(visited.find(i) == visited.end()){
                dfs(i,adj,visited);
                cnt++;
            }
        }
        return cnt;

    }   
};
